[tool.poetry]
name = "scratch"
version = "0.1.0"
description = ""
authors = ["Marcel Wilson <trenchrats@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
clockify-api-client = ">=0.1.0"
python-dateutil = "*"
pytz = "*"
mypy = "*"
black = "*"
flake8 = "^5.0.4"
jira = ">=3.4.0"
#pyderman = "^3.3.0"
semantic-version = ">=2.10.0"
requests = "*"
screenpy = "*"
#screenpy = { git = "git@github.com:ScreenPyHQ/screenpy.git", branch = "trunk"}
screenpy-selenium = { git = "git@github.com:ScreenPyHQ/screenpy_selenium.git", branch = "trunk"}
screenpy-pyotp = "^4.0.1"
isort = "*"
keyring = "^23.9.0"
pytest = "*"
ruff = "*"
setup_selenium = {git = "git@github.com:bandophahita/setup_selenium.git", branch = "main"}

[tool.poetry.dev-dependencies]
types-pytz = "*"
types-python-dateutil = "*"
types-requests = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # Pyflakes
    "I",  # isort
    "C4",  # flake8-comprehensions
    "TCH",  # type checking
    "RUF",  # ruff specific
    "UP",  # python upgrade
#    "A",  # built-ins
    "B",  # bugbear
    #    "ARG",  # unused arguments
    #    "PT",  # Pytest style
    #    "RET", # flake8 return
    #    "SIM", # flake8 simplify
    #    "TD",  #TODOs
    #    "FBT",  # boolean trap
#    "ANN",  # annotations
]
ignore = [
    #    "PT003",  # pytest fixture scope implied
    #    "PT004",  # pytest fixture setup doesn't return anything
    "RUF100",  # blanket noqa
    "ANN101",  # missing-type-self
    "ANN102",  # cls 
    #    "ANN401",  # any-type
]
# Avoid trying to fix flake8-bugbear (`B`) violations.
#unfixable = ["B"]

# Same as Black.
line-length = 88

exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
    "advent_of_code",
    "playing",
    "sample_pytest",
]

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

#[tool.ruff.flake8-annotations]
#mypy-init-return = true

[tool.ruff.flake8-annotations]
# ignore returns types for functions that implicity or explicitly only return None
suppress-none-returning = true
allow-star-arg-any = true

[tool.black]
line-length = 88
target-version = ['py310']

# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
)

'''
